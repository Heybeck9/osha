#!/bin/bash
#
# EXECUTIONER - WADE Autonomous Repo Refactor Launcher
# 
# Usage: executioner
# 
# This script creates a complete autonomous AI development environment
# that can understand your vision and transform repositories accordingly.
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# ASCII Art Banner
echo -e "${PURPLE}"
cat << "EOF"
██╗    ██╗ █████╗ ██████╗ ███████╗
██║    ██║██╔══██╗██╔══██╗██╔════╝
██║ █╗ ██║███████║██║  ██║█████╗  
██║███╗██║██╔══██║██║  ██║██╔══╝  
╚███╔███╔╝██║  ██║██████╔╝███████╗
 ╚══╝╚══╝ ╚═╝  ╚═╝╚═════╝ ╚══════╝
                                  
    Autonomous Repo Refactor Agent
         🤖 EXECUTIONER 🤖
EOF
echo -e "${NC}"

echo -e "${CYAN}🚀 Initializing WADE Autonomous Development Environment...${NC}"

# Set up directories
WADE_DIR="/workspace/wade_env"
VENV_DIR="$WADE_DIR/venv"
DEMO_DIR="$WADE_DIR/demo_repo"

echo -e "${BLUE}📁 Creating WADE environment at $WADE_DIR${NC}"
mkdir -p "$WADE_DIR"
cd "$WADE_DIR"

# Create virtual environment if it doesn't exist
if [ ! -d "$VENV_DIR" ]; then
    echo -e "${BLUE}🐍 Creating Python virtual environment...${NC}"
    python3 -m venv "$VENV_DIR"
fi

source "$VENV_DIR/bin/activate"

# Install dependencies if not already installed
echo -e "${BLUE}📦 Installing dependencies...${NC}"
pip install --quiet fastapi uvicorn python-multipart jinja2 aiofiles 2>/dev/null || echo "Dependencies already installed"

# Copy the WADE server from workspace if it doesn't exist
if [ ! -f "$WADE_DIR/wade_server.py" ]; then
    echo -e "${BLUE}🤖 Setting up WADE server...${NC}"
    cp /workspace/wade_server.py "$WADE_DIR/"
fi

# Create demo repository if it doesn't exist
if [ ! -d "$DEMO_DIR" ]; then
    echo -e "${BLUE}📁 Creating demo repository...${NC}"
    mkdir -p "$DEMO_DIR"
    
    # Copy demo repo from workspace
    if [ -d "/workspace/demo_repo" ]; then
        cp -r /workspace/demo_repo/* "$DEMO_DIR/"
    else
        # Create basic demo app
        cat > "$DEMO_DIR/app.py" << 'DEMO_APP_EOF'
#!/usr/bin/env python3
"""
Demo Flask Application
A simple Flask app that will be refactored by WADE
"""

from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/')
def home():
    return jsonify({"message": "Hello from Flask!", "status": "running"})

@app.route('/users', methods=['GET'])
def get_users():
    users = [
        {"id": 1, "name": "Alice", "email": "alice@example.com"},
        {"id": 2, "name": "Bob", "email": "bob@example.com"}
    ]
    return jsonify(users)

@app.route('/users', methods=['POST'])
def create_user():
    data = request.get_json()
    if not data or 'name' not in data:
        return jsonify({"error": "Name is required"}), 400
    
    user = {
        "id": 3,
        "name": data['name'],
        "email": data.get('email', '')
    }
    return jsonify(user), 201

@app.route('/health')
def health():
    return jsonify({"status": "healthy"})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
DEMO_APP_EOF

        cat > "$DEMO_DIR/requirements.txt" << 'REQUIREMENTS_EOF'
Flask==2.3.3
requests==2.31.0
REQUIREMENTS_EOF
    fi
fi

# Function to check if port is in use
port_in_use() {
    lsof -i :$1 >/dev/null 2>&1
}

# Kill any existing WADE server
if port_in_use 12000; then
    echo -e "${YELLOW}⚠️  Stopping existing WADE server...${NC}"
    lsof -ti:12000 | xargs kill -9 2>/dev/null || true
    sleep 2
fi

echo -e "${GREEN}"
cat << "SUCCESS_EOF"
🎉 WADE AUTONOMOUS REPO REFACTOR READY! 🎉

✅ Virtual environment activated
✅ Dependencies installed  
✅ Demo repository ready
✅ WADE server configured

🚀 STARTING WADE SERVER...
SUCCESS_EOF
echo -e "${NC}"

# Start WADE server
echo -e "${CYAN}🤖 Starting WADE Autonomous Refactor Server...${NC}"
echo -e "${BLUE}📍 Web Interface: https://work-1-bgqqisslappxddir.prod-runtime.all-hands.dev${NC}"
echo -e "${BLUE}📁 Demo Repository: $DEMO_DIR${NC}"
echo ""

# Start the server
cd "$WADE_DIR"
python wade_server.py